// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  avatar    String?
  todoOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  todoColumn TodoColumn?

  @@map("users")
}

model TodoColumn {
  id        String   @id @default(cuid())
  name      String
  order     Int      @default(0)
  isDefault Boolean  @default(false) // For "Unassigned" column
  userId    String?  @unique // Optional - allows for custom columns not tied to users
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos     Todo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("todo_columns")
}

model Todo {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  priority    Priority @default(MEDIUM)
  dueDate     DateTime?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  todoColumnId String?
  todoColumn   TodoColumn? @relation(fields: [todoColumnId], references: [id], onDelete: Cascade)

  @@map("todos")
}

model ShoppingList {
  id        String            @id @default(cuid())
  name      String
  order     Int               @default(0)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  items ShoppingListItem[]

  @@map("shopping_lists")
}

model ShoppingListItem {
  id       String  @id @default(cuid())
  name     String
  quantity Int     @default(1)
  unit     String?
  checked  Boolean @default(false)
  notes    String?
  order    Int     @default(0)

  // Relations
  shoppingListId String
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)

  @@map("shopping_list_items")
}

model Integration {
  id        String   @id @default(cuid())
  name      String   // e.g., "My Tandoor Instance"
  type      String   // e.g., "shopping", "calendar"
  service   String   // e.g., "tandoor", "mealie", "google"
  apiKey    String?
  baseUrl   String?
  enabled   Boolean  @default(true)
  settings  Json?    // Additional settings specific to the integration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
  @@map("integrations")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
